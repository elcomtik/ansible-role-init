---
# tasks file for ansible-role-init

- name: Print configured ansible_user vars
  debug:
    msg: |
      ansible_user: {{ ansible_user | d('unset') }};
      remote_user: {{ remote_user | d('unset') }}

- name: Check if configured ansible user can be used
  action: ping
  ignore_unreachable: true  # requires Ansible >= 2.7
  ignore_errors: yes
  register: pingtest

- meta: clear_host_errors

- name: Set ansible_user if ping failed
  set_fact:
    ansible_user_temp: "{{ ansible_user}}"
    ansible_user: "{{ bootstrap_user }}"
  when: pingtest.failed | d(pingtest.unreachable) | d(false)

- name: Print current ansible user
  debug:
    msg: "ansible_user: {{ ansible_user | d('unset') }}"

- name: Gather facts
  action: setup

- name: Make sure essential software is installed & latest version
  package:
    name: 
     - python3
     - sudo
    state: 'latest'
  become: true

- name: Create '{{ ssh_user }}' account
  user:
    name: '{{ ssh_user }}'
    state: 'present'
    shell: '/bin/bash'
  become: true

- name: Configure '{{ ssh_user }}' user privileged access by sudo
  lineinfile:
    dest: '/etc/sudoers.d/ansible'
    state: 'present'
    create: True
    regexp: '^%{{ ssh_user }}'
    line: '%{{ ssh_user }} ALL=(ALL) NOPASSWD: SETENV: ALL'
    owner: 'root'
    group: 'root'
    mode: '0440'
    validate: 'visudo -cf %s'
  become: true

- name: Get current workdir
  set_fact:
    pwd: "{{ lookup('env', 'PWD') }}"

- name: Create path to keys (step1)
  set_fact: 
    interim_string: "{% for item in ssh_keys %}{{pwd}}{{ssh_keys_path}}/{{item}} {% endfor %}"

- name: Create path to keys (step2)
  set_fact: 
    ssh_keys_path: "{{ interim_string.split() }}"

- name: Install ssh public key(s)
  authorized_key:
    user: '{{ ssh_user }}'
    key: '{{ item }}'
    state: 'present'
  with_file: '{{ ssh_keys_path }}'
  failed_when: (ssh_keys is undefined or (ssh_keys is defined and not ssh_keys))
  become: true


- name: Set back configured ansible_user
  set_fact:
    ansible_user: "{{ ansible_user_temp }}"
  when: ansible_user_temp is defined

  #this will succed only if new ansible_user can access remote host
- name: Remove ssh key from bootstrap user when enabled
  authorized_key:
    user: '{{ bootstrap_user }}'
    key: '{{ item }}'
    state: 'absent'
  with_file: '{{ ssh_keys_path }}'
  when: remove_bootstrap_user_ssh_keys
  failed_when: (ssh_keys is undefined or (ssh_keys is defined and not ssh_keys))
  become: true


